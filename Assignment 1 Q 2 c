import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to capture an image from the webcam
def capture_image():
    cap = cv2.VideoCapture(0)  # Change (0) to (1) or other indices if the camera does not work
    if not cap.isOpened():
        print("Error: Could not open the camera.")
        return None
    
    print("Press 's' to take a snapshot...")
    while True:
        ret, frame = cap.read()  # Capture the frame
        if not ret:
            print("Error: Cannot capture the frame.")
            break
        
        cv2.imshow('Camera', frame)
        
        # Press 's' to save the snapshot and 'q' to quit
        key = cv2.waitKey(1) & 0xFF
        if key == ord('s'):  # Take snapshot on pressing 's'
            image = frame
            break
        elif key == ord('q'):  # Quit on pressing 'q'
            image = None
            break
    
    cap.release()
    cv2.destroyAllWindows()
    return image

# Function to apply the Sobel filter in both x and y directions
def apply_sobel_filter(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # Convert to grayscale
    
    # Apply Sobel filters
    sobel_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)  # Gradient in x-direction
    sobel_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)  # Gradient in y-direction
    
    # Compute the combined magnitude
    sobel_combined = cv2.magnitude(sobel_x, sobel_y)
    sobel_combined = np.uint8(sobel_combined)  # Convert to 8-bit for display
    
    return gray, sobel_x, sobel_y, sobel_combined

# Function to display results in a 2x4 grid
def display_in_grid(images, titles):
    n, m = 2, 4  # 2 rows, 4 columns
    fig, axes = plt.subplots(n, m, figsize=(12, 6))
    axes = axes.ravel()  # Flatten the 2D axes array into 1D
    
    for i in range(len(images)):
        axes[i].imshow(images[i], cmap='gray')
        axes[i].set_title(titles[i])
        axes[i].axis('off')
    
    # Hide any unused subplots
    for i in range(len(images), n * m):
        fig.delaxes(axes[i])
    
    plt.tight_layout()
    plt.show()

# Main function
def main():
    # Capture an image
    image = capture_image()
    if image is None:
        print("No image captured. Exiting...")
        return
    
    # Apply Sobel filter
    gray, sobel_x, sobel_y, sobel_combined = apply_sobel_filter(image)
    
    # Prepare images and titles for display
    images = [image, gray, sobel_x, sobel_y, sobel_combined]
    titles = ["Original Image", "Grayscale", "Sobel X", "Sobel Y", "Sobel Combined"]
    
    # Add extra blank images to fit into a 2x4 grid
    blank_image = np.zeros_like(gray)
    while len(images) < 8:  # Fill remaining slots in the grid
        images.append(blank_image)
        titles.append("Blank")
    
    # Display the results in a grid
    display_in_grid(images, titles)

# Run the main function
if __name__ == "__main__":
    main()
