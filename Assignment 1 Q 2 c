#Sobel Filter
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to capture an image from the webcam
def capture_image():
    cap = cv2.VideoCapture(0)  # Change (0) to (1) or other indices if the camera does not work
    if not cap.isOpened():
        print("Error: Could not open the camera.")
        return None
    
    print("Press 's' to take a snapshot...")
    while True:
        ret, frame = cap.read()  # Capture the frame
        if not ret:
            print("Error: Cannot capture the frame.")
            break
        
        cv2.imshow('Camera', frame)
        
        # Press 's' to save the snapshot and 'q' to quit
        key = cv2.waitKey(1) & 0xFF
        if key == ord('s'):  # Take snapshot on pressing 's'
            image = frame
            break
        elif key == ord('q'):  # Quit on pressing 'q'
            image = None
            break
    
    cap.release()
    cv2.destroyAllWindows()
    return image

# Function to apply the Sobel filter in both x and y directions
def apply_sobel_filter(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # Convert to grayscale
    
    # Apply Sobel filters
    sobel_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)  # Gradient in x-direction
    sobel_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)  # Gradient in y-direction
    
    # Compute the combined magnitude
    sobel_combined = cv2.magnitude(sobel_x, sobel_y)
    sobel_combined = np.uint8(sobel_combined)  # Convert to 8-bit for display
    
    return gray, sobel_x, sobel_y, sobel_combined

# Function to display results in a 2x4 grid
def display_in_grid(images, titles):
    n, m = 2, 4  # 2 rows, 4 columns
    fig, axes = plt.subplots(n, m, figsize=(12, 6))
    axes = axes.ravel()  # Flatten the 2D axes array into 1D
    
    for i in range(len(images)):
        axes[i].imshow(images[i], cmap='gray')
        axes[i].set_title(titles[i])
        axes[i].axis('off')
    
    # Hide any unused subplots
    for i in range(len(images), n * m):
        fig.delaxes(axes[i])
    
    plt.tight_layout()
    plt.show()

# Main function
def main():
    # Capture an image
    image = capture_image()
    if image is None:
        print("No image captured. Exiting...")
        return
    
    # Apply Sobel filter
    gray, sobel_x, sobel_y, sobel_combined = apply_sobel_filter(image)
    
    # Prepare images and titles for display
    images = [image, gray, sobel_x, sobel_y, sobel_combined]
    titles = ["Original Image", "Grayscale", "Sobel X", "Sobel Y", "Sobel Combined"]
    
    # Add extra blank images to fit into a 2x4 grid
    blank_image = np.zeros_like(gray)
    while len(images) < 8:  # Fill remaining slots in the grid
        images.append(blank_image)
        titles.append("Blank")
    
    # Display the results in a grid
    display_in_grid(images, titles)

# Run the main function
if __name__ == "__main__":
    main()

#Canny Edge
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to capture an image from the webcam
def capture_image(camera_index=0):
    cap = cv2.VideoCapture(camera_index)  # Open the webcam
    if not cap.isOpened():
        print("Error: Could not open webcam.")
        return None
    
    print("Press 'SPACE' to capture an image, 'ESC' to exit.")
    while True:
        ret, frame = cap.read()  # Read a frame
        if not ret:
            print("Error: Unable to capture video.")
            break

        cv2.imshow("Press SPACE to Capture", frame)

        # Wait for a key press
        key = cv2.waitKey(1) & 0xFF
        if key == 27:  # ESC key to exit
            cap.release()
            cv2.destroyAllWindows()
            return None
        elif key == 32:  # SPACE key to capture
            break

    cap.release()
    cv2.destroyAllWindows()
    return frame

# Function to apply Canny edge detection
def canny_edge_detector(image, thresholds):
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # Convert to grayscale
    edges = cv2.Canny(gray_image, thresholds[0], thresholds[1])  # Apply Canny edge detection
    return edges

# Function to display images in a 2x4 grid
def display_in_grid(original_image, edge_images, grid_shape=(2, 4)):
    fig, axes = plt.subplots(grid_shape[0], grid_shape[1], figsize=(12, 6))
    axes = axes.flatten()  # Flatten the grid for easy iteration
    
    # Display the original image in the first slot
    axes[0].imshow(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))
    axes[0].set_title("Original Image")
    axes[0].axis('off')

    # Display edge images in the remaining slots
    for i, edge_image in enumerate(edge_images):
        axes[i + 1].imshow(edge_image, cmap='gray')
        axes[i + 1].set_title(f"Canny Edges {i+1}")
        axes[i + 1].axis('off')

    plt.tight_layout()
    plt.show()

# Main script
if __name__ == "__main__":
    # Step 1: Capture an image
    image = capture_image(camera_index=0)  # Try 1, 2 if the camera doesn't work
    if image is None:
        print("No image captured. Exiting.")
        exit()

    # Step 2: Generate multiple edge images with varying thresholds
    thresholds_list = [(50, 150), (75, 175), (100, 200), (125, 225), (150, 250), (175, 275), (200, 300)]
    edge_images = [canny_edge_detector(image, thresholds) for thresholds in thresholds_list]

    # Step 3: Display the original and edge-detected images in a 2x4 grid
    display_in_grid(image, edge_images, grid_shape=(2, 4))
